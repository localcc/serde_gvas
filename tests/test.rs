use serde::Deserialize;
use serde_gvas::{serde_gvas_header};
use serde_gvas::types::{FEngineVersion, GvasHeader};

// Test file bytes
// This file contains unreal header, as well as some properties for testing
const TEST_FILE: [u8; 1781] = [0x47, 0x56, 0x41, 0x53, 0x02, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x04, 0x00, 0x19, 0x00, 0x04, 0x00, 0x1D, 0xCA, 0xDC, 0x00, 0x13, 0x00, 0x00, 0x00, 0x2B, 0x2B, 0x55, 0x45, 0x34, 0x2B, 0x52, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x2D, 0x34, 0x2E, 0x32, 0x35, 0x00, 0x03, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x22, 0xD5, 0x54, 0x9C, 0xBE, 0x4F, 0x26, 0xA8, 0x46, 0x07, 0x21, 0x94, 0xD0, 0x82, 0xB4, 0x61, 0x1E, 0x00, 0x00, 0x00, 0xE4, 0x32, 0xD8, 0xB0, 0x0D, 0x4F, 0x89, 0x1F, 0xB7, 0x7E, 0xCF, 0xAC, 0xA2, 0x4A, 0xFD, 0x36, 0x0A, 0x00, 0x00, 0x00, 0x28, 0x43, 0xC6, 0xE1, 0x53, 0x4D, 0x2C, 0xA2, 0x86, 0x8E, 0x6C, 0xA3, 0x8C, 0xBD, 0x17, 0x64, 0x00, 0x00, 0x00, 0x00, 0x3C, 0xC1, 0x5E, 0x37, 0xFB, 0x48, 0xE4, 0x06, 0xF0, 0x84, 0x00, 0xB5, 0x7E, 0x71, 0x2A, 0x26, 0x04, 0x00, 0x00, 0x00, 0xED, 0x68, 0xB0, 0xE4, 0xE9, 0x42, 0x94, 0xF4, 0x0B, 0xDA, 0x31, 0xA2, 0x41, 0xBB, 0x46, 0x2E, 0x26, 0x00, 0x00, 0x00, 0x3F, 0x74, 0xFC, 0xCF, 0x80, 0x44, 0xB0, 0x43, 0xDF, 0x14, 0x91, 0x93, 0x73, 0x20, 0x1D, 0x17, 0x25, 0x00, 0x00, 0x00, 0xB5, 0x49, 0x2B, 0xB0, 0xE9, 0x44, 0x20, 0xBB, 0xB7, 0x32, 0x04, 0xA3, 0x60, 0x03, 0xE4, 0x52, 0x02, 0x00, 0x00, 0x00, 0x5C, 0x10, 0xE4, 0xA4, 0xB5, 0x49, 0xA1, 0x59, 0xC4, 0x40, 0xC5, 0xA7, 0xEE, 0xDF, 0x7E, 0x54, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x31, 0xC8, 0x39, 0xDC, 0x47, 0xE6, 0x5A, 0x17, 0x9C, 0x44, 0x9A, 0x7C, 0x8E, 0x1C, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x33, 0x1B, 0xF0, 0x78, 0x98, 0x4F, 0xEA, 0xEB, 0xEA, 0x84, 0xB4, 0xB9, 0xA2, 0x5A, 0xB9, 0xCC, 0x04, 0x00, 0x00, 0x00, 0x0F, 0x38, 0x31, 0x66, 0xE0, 0x43, 0x4D, 0x2D, 0x27, 0xCF, 0x09, 0x80, 0x5A, 0xA9, 0x56, 0x69, 0x00, 0x00, 0x00, 0x00, 0x9F, 0x8B, 0xF8, 0x12, 0xFC, 0x4A, 0x75, 0x88, 0x0C, 0xD9, 0x7C, 0xA6, 0x29, 0xBD, 0x3A, 0x38, 0x2B, 0x00, 0x00, 0x00, 0x4C, 0xE7, 0x5A, 0x7B, 0x10, 0x4C, 0x70, 0xD2, 0x98, 0x57, 0x58, 0xA9, 0x5A, 0x2A, 0x21, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x18, 0x69, 0x29, 0xD7, 0xDD, 0x4B, 0xD6, 0x1D, 0xA8, 0x64, 0xE2, 0x9D, 0x84, 0x38, 0xC1, 0x3C, 0x03, 0x00, 0x00, 0x00, 0x78, 0x52, 0xA1, 0xC2, 0xFE, 0x4A, 0xE7, 0xBF, 0xFF, 0x90, 0x17, 0x6C, 0x55, 0xF7, 0x1D, 0x53, 0x01, 0x00, 0x00, 0x00, 0xD4, 0xA3, 0xAC, 0x6E, 0xC1, 0x4C, 0xEC, 0x40, 0xED, 0x8B, 0x86, 0xB7, 0xC5, 0x8F, 0x42, 0x09, 0x03, 0x00, 0x00, 0x00, 0xDD, 0x75, 0xE5, 0x29, 0x27, 0x46, 0xA3, 0xE0, 0x76, 0xD2, 0x10, 0x9D, 0xEA, 0xDC, 0x2C, 0x23, 0x11, 0x00, 0x00, 0x00, 0x5D, 0xA6, 0x43, 0xAF, 0x47, 0x49, 0xD3, 0x7F, 0x8E, 0x3E, 0x73, 0x98, 0x05, 0xBB, 0xC1, 0xD9, 0x07, 0x00, 0x00, 0x00, 0xEC, 0x6C, 0x26, 0x6B, 0x8F, 0x4B, 0xC7, 0x1E, 0xD9, 0xE4, 0x0B, 0xA3, 0x07, 0xFC, 0x42, 0x09, 0x01, 0x00, 0x00, 0x00, 0x61, 0x3D, 0xF7, 0x0D, 0xEA, 0x47, 0x3F, 0xA2, 0xE9, 0x89, 0x27, 0xB7, 0x9A, 0x49, 0x41, 0x0C, 0x01, 0x00, 0x00, 0x00, 0x86, 0x18, 0x1D, 0x60, 0x84, 0x4F, 0x64, 0xAC, 0xDE, 0xD3, 0x16, 0xAA, 0xD6, 0xC7, 0xEA, 0x0D, 0x1F, 0x00, 0x00, 0x00, 0xD6, 0xBC, 0xFF, 0x9D, 0x58, 0x01, 0x4F, 0x49, 0x82, 0x12, 0x21, 0xE2, 0x88, 0xA8, 0x92, 0x3C, 0x0A, 0x00, 0x00, 0x00, 0xAC, 0xD0, 0xAE, 0xF2, 0x6F, 0x41, 0xFE, 0x9A, 0x7F, 0xAA, 0x64, 0x86, 0xFC, 0xD6, 0x26, 0xFA, 0x01, 0x00, 0x00, 0x00, 0x0B, 0x1F, 0x4F, 0x17, 0xA5, 0x45, 0xC6, 0xB4, 0xE8, 0x2E, 0x3F, 0xB1, 0x7D, 0x91, 0xFB, 0xD0, 0x0A, 0x00, 0x00, 0x00, 0x83, 0x4A, 0xF9, 0x35, 0x6C, 0x40, 0x58, 0xE2, 0xF5, 0x09, 0x18, 0xA3, 0x7C, 0x24, 0x10, 0x96, 0x25, 0x00, 0x00, 0x00, 0x6E, 0xC1, 0x8F, 0xB6, 0xE2, 0x42, 0x1B, 0x8B, 0x5C, 0x21, 0x53, 0xB4, 0xFE, 0x44, 0x88, 0x05, 0x01, 0x00, 0x00, 0x00, 0x06, 0x85, 0xE1, 0xB2, 0xC2, 0xCF, 0x73, 0x42, 0xBB, 0xF4, 0x4E, 0xA5, 0x07, 0xBA, 0x8B, 0x75, 0x01, 0x00, 0x00, 0x00, 0x50, 0x32, 0x68, 0x54, 0xAF, 0x48, 0x99, 0x80, 0x96, 0x98, 0xC8, 0x8B, 0xB7, 0xF9, 0xAD, 0xFB, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x9E, 0x7F, 0x71, 0x3A, 0x49, 0xB0, 0xE9, 0x32, 0x91, 0xB3, 0x88, 0x07, 0x81, 0x38, 0x1B, 0x06, 0x00, 0x00, 0x00, 0xB3, 0xDC, 0x7D, 0x8E, 0xBB, 0x47, 0xDA, 0x80, 0xA2, 0x46, 0xD3, 0x9F, 0xF6, 0x4D, 0x98, 0x93, 0x01, 0x00, 0x00, 0x00, 0xCD, 0xB0, 0x8A, 0xCB, 0xDE, 0x4B, 0x8C, 0xE7, 0x93, 0x13, 0x62, 0xA8, 0x62, 0xEF, 0xE9, 0x14, 0x00, 0x00, 0x00, 0x00, 0x96, 0x51, 0x96, 0xAB, 0xFC, 0x08, 0xD8, 0x45, 0x8D, 0x22, 0xD7, 0xB7, 0x9E, 0x56, 0xAD, 0x78, 0x01, 0x00, 0x00, 0x00, 0x0E, 0xB7, 0x50, 0x99, 0x17, 0x4E, 0x1A, 0xB4, 0x0D, 0xFA, 0xCC, 0xBB, 0xD6, 0x7F, 0x81, 0x57, 0x01, 0x00, 0x00, 0x00, 0xF2, 0x0A, 0x68, 0xFB, 0xA3, 0x4B, 0xEF, 0x59, 0xB5, 0x19, 0xA8, 0xBA, 0x3D, 0x44, 0xC8, 0x73, 0x02, 0x00, 0x00, 0x00, 0x91, 0x86, 0xE0, 0xAF, 0x52, 0x49, 0x0D, 0x3A, 0x3B, 0x67, 0x73, 0xB6, 0x1E, 0x2D, 0xF2, 0x7C, 0x02, 0x00, 0x00, 0x00, 0xBD, 0xFD, 0xB5, 0x2E, 0x10, 0x4D, 0xAC, 0x01, 0x8F, 0xF3, 0x36, 0x81, 0xDA, 0xA5, 0x93, 0x33, 0x05, 0x00, 0x00, 0x00, 0x4F, 0x35, 0x9D, 0x50, 0x2F, 0x49, 0xE6, 0xF6, 0xB2, 0x85, 0x49, 0xA7, 0x1C, 0x63, 0x3C, 0x07, 0x00, 0x00, 0x00, 0x00, 0xEA, 0xB7, 0x62, 0xA4, 0x3A, 0x4E, 0x99, 0xF4, 0x1F, 0xEC, 0xC1, 0x99, 0xB2, 0xE1, 0x24, 0x82, 0x02, 0x00, 0x00, 0x00, 0x19, 0x4D, 0x0C, 0x43, 0x70, 0x49, 0x54, 0x71, 0x69, 0x9B, 0x69, 0x87, 0xE5, 0xB0, 0x90, 0xDF, 0x0E, 0x00, 0x00, 0x00, 0xBD, 0x32, 0xFE, 0xAA, 0x14, 0x4C, 0x95, 0x53, 0x25, 0x5E, 0x6A, 0xB6, 0xDD, 0xD1, 0x32, 0x10, 0x01, 0x00, 0x00, 0x00, 0x8E, 0xE1, 0xAF, 0x23, 0x58, 0x4E, 0xE1, 0x4C, 0x52, 0xC2, 0x61, 0x8D, 0xB7, 0xBE, 0x53, 0xB9, 0x0B, 0x00, 0x00, 0x00, 0x40, 0xEB, 0x56, 0x4A, 0xDC, 0x11, 0xF5, 0x10, 0x7E, 0x34, 0xD3, 0x92, 0xE7, 0x6A, 0xC9, 0xB2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x8A, 0xD7, 0x97, 0x46, 0x58, 0xE8, 0xB5, 0x19, 0xA8, 0xBA, 0xB4, 0x46, 0x7D, 0x48, 0x11, 0x00, 0x00, 0x00, 0x86, 0xF8, 0x79, 0x55, 0x1F, 0x4C, 0x3A, 0x93, 0x7B, 0x08, 0xBA, 0x83, 0x2F, 0xB9, 0x61, 0x63, 0x01, 0x00, 0x00, 0x00, 0x52, 0xBE, 0x2F, 0x61, 0x0B, 0x40, 0x53, 0xDA, 0x91, 0x4F, 0x0D, 0x91, 0x7C, 0x85, 0xB1, 0x9F, 0x01, 0x00, 0x00, 0x00, 0x36, 0x7A, 0x23, 0xA4, 0xC9, 0x41, 0xEA, 0xCA, 0xF8, 0x18, 0xA2, 0x8F, 0xF3, 0x1B, 0x68, 0x58, 0x04, 0x00, 0x00, 0x00, 0x75, 0x3F, 0x4E, 0x80, 0x49, 0x4B, 0x88, 0x70, 0x06, 0x8C, 0xD6, 0xA4, 0xDC, 0xB6, 0x7E, 0x3C, 0x05, 0x00, 0x00, 0x00, 0xF3, 0x7A, 0xBB, 0x24, 0x83, 0x4F, 0x46, 0x56, 0xC2, 0x2D, 0x2F, 0x1F, 0xFF, 0x96, 0xAD, 0x49, 0x05, 0x00, 0x00, 0x00, 0xFA, 0x7A, 0xF5, 0xFC, 0x83, 0x42, 0x76, 0x50, 0x58, 0xE6, 0xA9, 0xB9, 0x32, 0x2D, 0xA0, 0xFF, 0x3D, 0x00, 0x00, 0x00, 0xED, 0x0A, 0x31, 0x11, 0x61, 0x4D, 0x55, 0x2E, 0xA3, 0x9A, 0x67, 0xAF, 0x2C, 0x08, 0xA1, 0xC5, 0x11, 0x00, 0x00, 0x00, 0x29, 0x23, 0xA5, 0x76, 0xB5, 0x45, 0x23, 0x09, 0x41, 0xD8, 0xAE, 0x98, 0xD8, 0x6A, 0x2F, 0xCF, 0x02, 0x00, 0x00, 0x00, 0x07, 0x69, 0xBC, 0x5F, 0xAE, 0x40, 0xC8, 0x55, 0x84, 0xF1, 0x67, 0x8E, 0x3F, 0xF1, 0xFF, 0x5E, 0x01, 0x00, 0x00, 0x00, 0x12, 0xE4, 0x26, 0xFB, 0x4D, 0x4B, 0x15, 0x1F, 0x0A, 0x55, 0x72, 0x93, 0x70, 0x2F, 0x1D, 0x96, 0x03, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x2F, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2F, 0x55, 0x45, 0x34, 0x53, 0x61, 0x76, 0x65, 0x46, 0x49, 0x6C, 0x65, 0x2E, 0x54, 0x65, 0x73, 0x74, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69, 0x6C, 0x65, 0x00, 0x08, 0x00, 0x00, 0x00, 0x75, 0x38, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x42, 0x79, 0x74, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x7B, 0x08, 0x00, 0x00, 0x00, 0x69, 0x38, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x38, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0C, 0x00, 0x00, 0x00, 0x75, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x55, 0x49, 0x6E, 0x74, 0x31, 0x36, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0x04, 0x0B, 0x00, 0x00, 0x00, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x31, 0x36, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x30, 0x0D, 0x00, 0x00, 0x00, 0x75, 0x6D, 0x65, 0x64, 0x69, 0x75, 0x6D, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x55, 0x49, 0x6E, 0x74, 0x33, 0x32, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCB, 0x3D, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x6D, 0x65, 0x64, 0x69, 0x75, 0x6D, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE3, 0x04, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x75, 0x6C, 0x6F, 0x6E, 0x67, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x55, 0x49, 0x6E, 0x74, 0x36, 0x34, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x6C, 0x6F, 0x6E, 0x67, 0x5F, 0x74, 0x65, 0x73, 0x74, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x36, 0x34, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xE1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x74, 0x65, 0x73, 0x74, 0x5F, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x56, 0xDF, 0x2A, 0x6E, 0xAA, 0xD9, 0x08, 0x0B, 0x00, 0x00, 0x00, 0x66, 0x5F, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x46, 0x6C, 0x6F, 0x61, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x6D, 0xFA, 0x42, 0x0B, 0x00, 0x00, 0x00, 0x64, 0x5F, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x44, 0x6F, 0x75, 0x62, 0x6C, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xCA, 0xA1, 0x45, 0x76, 0xCE, 0xA0, 0x40, 0x0D, 0x00, 0x00, 0x00, 0x73, 0x74, 0x72, 0x5F, 0x70, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x53, 0x74, 0x72, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x53, 0x6F, 0x6D, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x05, 0x00, 0x00, 0x00, 0x4E, 0x6F, 0x6E, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00];

#[derive(Deserialize)]
struct UnrealFile {
    u8_test: u8,
    i8_test: i8,
    ushort_test: u16,
    short_test: i16,
    umedium_test: u32,
    medium_test: i32,
    ulong_test: u64,
    long_test: i64,
    f_property: f32,
    d_property: f64,
    str_property: String,
    test_struct: u64
}

fn get_expected_header() -> GvasHeader {
    GvasHeader {
        file_type_tag: 0x53415647, // "GVAS" in the beginning of the header
        save_game_file_version: 2,
        package_file_ue4_version: 518,
        engine_version: FEngineVersion {
            major: 4,
            minor: 25,
            patch: 4,
            change_list: 14469661,
            branch: String::from("++UE4+Release-4.25")
        },
        custom_version_format: 3,
        custom_versions: vec!(),
        save_game_class_name: String::from("/Script/UE4SaveFIle.TestSaveFile")
    }
}

fn get_expected_file() -> UnrealFile {
    UnrealFile {
        u8_test: 123,
        i8_test: 15,
        short_test: 12515,
        ushort_test: 1255,
        umedium_test: 15819,
        medium_test: 1251,
        ulong_test: 12152,
        long_test: 123145,
        f_property: 125.213f32,
        d_property: 2151.231f64,
        str_property: String::from("Some content in string"),
        test_struct: 0x8D9AA6E2ADF5640
    }
}

fn header_check(parse_header: &GvasHeader) {
    let expected_header = get_expected_header();
    assert_eq!(parse_header.file_type_tag, expected_header.file_type_tag);
    assert_eq!(parse_header.save_game_file_version, expected_header.save_game_file_version);
    assert_eq!(parse_header.package_file_ue4_version, expected_header.package_file_ue4_version);
    assert_eq!(parse_header.engine_version, expected_header.engine_version);
    assert_eq!(parse_header.custom_version_format, expected_header.custom_version_format);
    //todo: add custom versions check
    assert_eq!(parse_header.save_game_class_name, expected_header.save_game_class_name);
}

#[test]
fn read_header() {
    let parse_header: GvasHeader = serde_gvas_header::from_bytes(&TEST_FILE).expect("Failed to parse file!");
    header_check(&parse_header);
}

#[test]
fn read_data() {
    let mut header_deserializer = serde_gvas_header::Deserializer::from_bytes(&TEST_FILE);
    let header: GvasHeader = GvasHeader::deserialize(&mut header_deserializer).expect("Failed to parse file header!");

    header_check(&header);

    let parse_file: UnrealFile = serde_gvas::from_bytes(&TEST_FILE, header_deserializer.parsed_length()).expect("Failed to parse file!");
    let expected_file = get_expected_file();

    assert_eq!(parse_file.u8_test, expected_file.u8_test);
    assert_eq!(parse_file.i8_test, expected_file.i8_test);
    assert_eq!(parse_file.short_test, expected_file.short_test);
    assert_eq!(parse_file.ushort_test, expected_file.ushort_test);
    assert_eq!(parse_file.umedium_test, expected_file.umedium_test);
    assert_eq!(parse_file.medium_test, expected_file.medium_test);
    assert_eq!(parse_file.ulong_test, expected_file.ulong_test);
    assert_eq!(parse_file.long_test, expected_file.long_test);
    assert_eq!(parse_file.f_property, expected_file.f_property);
    assert_eq!(parse_file.d_property, expected_file.d_property);
    assert_eq!(parse_file.str_property, expected_file.str_property);
    assert_eq!(parse_file.test_struct, expected_file.test_struct);
}